create schema functions_test;
set search_path = 'functions_test';
-- test @@rowcount
create table t1 (c1 int);
select @@rowcount;
 rowcount 
----------
        0
(1 row)

insert into t1 values(generate_series(1,10));
select @@rowcount;
 rowcount 
----------
       10
(1 row)

delete t1 where c1 in (1,3,5,7);
select @@rowcount;
 rowcount 
----------
        4
(1 row)

update t1 set c1 = 12 where c1 in (2,4);
select @@rowcount;
 rowcount 
----------
        2
(1 row)

select * from t1; 
 c1 
----
  6
  8
  9
 10
 12
 12
(6 rows)

select @@rowcount;
 rowcount 
----------
        6
(1 row)

select count(*) from t1;
 count 
-------
     6
(1 row)

select @@rowcount;
 rowcount 
----------
        1
(1 row)

do $$
begin
execute 'select * from t1';
RAISE NOTICE '@@rowcount: %', @@rowcount;
end $$;
NOTICE:  @@rowcount: 6
set enable_set_variable_b_format to on;
select @@rowcount;
 rowcount 
----------
        0
(1 row)

reset enable_set_variable_b_format;
select @@rowcount;
 rowcount 
----------
        0
(1 row)

begin transaction;
declare c1 cursor for select * from t1;
select @@rowcount;
 rowcount 
----------
        0
(1 row)

fetch next from c1;
 c1 
----
  6
(1 row)

select @@rowcount;
 rowcount 
----------
        1
(1 row)

rollback transaction;
select abcd from t1; -- expect error 
ERROR:  column "abcd" does not exist
LINE 1: select abcd from t1;
               ^
CONTEXT:  referenced column: abcd
select @@rowcount;
 rowcount 
----------
        0
(1 row)

-- rowcount_big()
drop table t1;
select rowcount_big();
 rowcount_big 
--------------
            0
(1 row)

create table t1 (c1 int);
select rowcount_big();
 rowcount_big 
--------------
            0
(1 row)

insert into t1 values(generate_series(1,10));
select rowcount_big();
 rowcount_big 
--------------
           10
(1 row)

delete t1 where c1 in (1,3,5,7);
select rowcount_big();
 rowcount_big 
--------------
            4
(1 row)

update t1 set c1 = 12 where c1 in (2,4);
select rowcount_big();
 rowcount_big 
--------------
            2
(1 row)

select * from t1; 
 c1 
----
  6
  8
  9
 10
 12
 12
(6 rows)

select rowcount_big();
 rowcount_big 
--------------
            6
(1 row)

select count(*) from t1;
 count 
-------
     6
(1 row)

select rowcount_big();
 rowcount_big 
--------------
            1
(1 row)

set enable_set_variable_b_format to on;
select rowcount_big();
 rowcount_big 
--------------
            0
(1 row)

reset enable_set_variable_b_format;
select rowcount_big();
 rowcount_big 
--------------
            0
(1 row)

begin transaction;
declare c1 cursor for select * from t1;
select rowcount_big();
 rowcount_big 
--------------
            0
(1 row)

fetch next from c1;
 c1 
----
  6
(1 row)

select rowcount_big();
 rowcount_big 
--------------
            1
(1 row)

rollback transaction;
select abcd from t1; -- expect error 
ERROR:  column "abcd" does not exist
LINE 1: select abcd from t1;
               ^
CONTEXT:  referenced column: abcd
select rowcount_big();
 rowcount_big 
--------------
            0
(1 row)

-- bypass usecases
set enable_seqscan to off;
set enable_bitmapscan to off;
create index i1 on t1(c1);
explain (costs off) select * from t1;
           QUERY PLAN           
--------------------------------
 [Bypass]
 Index Only Scan using i1 on t1
(2 rows)

select @@rowcount;
 rowcount 
----------
        0
(1 row)

select * from t1;
 c1 
----
  6
  8
  9
 10
 12
 12
(6 rows)

select @@rowcount;
 rowcount 
----------
        6
(1 row)

explain (costs off) insert into t1 values(20);
  QUERY PLAN  
--------------
 [Bypass]
 Insert on t1
   ->  Result
(3 rows)

insert into t1 values(generate_series(20,26));
select @@rowcount;
 rowcount 
----------
        7
(1 row)

explain (costs off) delete from t1 where c1 < 10;
           QUERY PLAN            
---------------------------------
 [Bypass]
 Delete on t1
   ->  Index Scan using i1 on t1
         Index Cond: (c1 < 10)
(4 rows)

delete from t1 where c1 < 10;
select @@rowcount;
 rowcount 
----------
        3
(1 row)

explain (costs off) update t1 set c1 = 30 where c1 > 21;
           QUERY PLAN            
---------------------------------
 [Bypass]
 Update on t1
   ->  Index Scan using i1 on t1
         Index Cond: (c1 > 21)
(4 rows)

update t1 set c1 = 30 where c1 > 21;
select @@rowcount;
 rowcount 
----------
        5
(1 row)

reset enable_seqscan;
reset enable_bitmapscan;
-- @@spid
select @@spid;
--?.* 
--?.*
--?.*
(1 row)

-- @@fetch_status
-- single cursor
begin transaction;
cursor c1 for select * from t1;
fetch next from c1;
 c1 
----
 10
(1 row)

select @@fetch_status;
 fetch_status 
--------------
            0
(1 row)

fetch next from c1;
 c1 
----
 12
(1 row)

select @@fetch_status;
 fetch_status 
--------------
            0
(1 row)

fetch last from c1;
 c1 
----
 30
(1 row)

select @@fetch_status;
 fetch_status 
--------------
            0
(1 row)

fetch next from c2;	-- expect error
ERROR:  cursor "c2" does not exist
select @@fetch_status;
ERROR:  current transaction is aborted, commands ignored until end of transaction block, firstChar[Q]
rollback transaction;
-- multi cursors
begin transaction;
cursor c1 for select * from t1;
cursor c2 for select * from t1;
fetch next from c1;
 c1 
----
 10
(1 row)

select @@fetch_status;
 fetch_status 
--------------
            0
(1 row)

fetch next from c2;
 c1 
----
 10
(1 row)

select @@fetch_status;
 fetch_status 
--------------
            0
(1 row)

fetch last from c1;
 c1 
----
 30
(1 row)

select @@fetch_status;
 fetch_status 
--------------
            0
(1 row)

fetch next from c2;
 c1 
----
 12
(1 row)

select @@fetch_status;
 fetch_status 
--------------
            0
(1 row)

rollback transaction;
-- pl/pgsql usecases
declare
rowcount int;
rowcount_big bigint;
spid bigint;
begin
spid := @@spid;
RAISE NOTICE '@@spid: %', spid;
execute 'select * from t1';
rowcount := @@rowcount;
RAISE NOTICE '@@rowcount: %', rowcount;
execute 'select * from t1';
rowcount_big := rowcount_big();
RAISE NOTICE '@@rowcount_big: %', rowcount_big;
end;
/
--?.*
NOTICE:  @@rowcount: 10
NOTICE:  @@rowcount_big: 10
-- pl/tsql usecases
CREATE OR REPLACE FUNCTION test_pltsql RETURNS INT AS
$$
declare
rowcount int;
rowcount_big bigint;
spid bigint;
begin
spid := @@spid;
RAISE NOTICE '@@spid: %', spid;
execute 'select * from t1';
rowcount := @@rowcount;
RAISE NOTICE '@@rowcount: %', rowcount;
execute 'select * from t1';
rowcount_big := rowcount_big();
RAISE NOTICE '@@rowcount_big: %', rowcount_big;
return 0;
end;
$$
LANGUAGE 'pltsql';
select test_pltsql();
--?.*
CONTEXT:  referenced column: test_pltsql
NOTICE:  @@rowcount: 10
CONTEXT:  referenced column: test_pltsql
NOTICE:  @@rowcount_big: 10
CONTEXT:  referenced column: test_pltsql
 test_pltsql 
-------------
           0
(1 row)

drop table t1;
drop function test_pltsql();
-- databasepropertyex
create database test_databasepropertyex dbcompatibility 'd';
select databasepropertyex('test_databasepropertyex', 'Collation');
 databasepropertyex 
--------------------
--?.*
(1 row)

select pg_typeof(databasepropertyex('test_databasepropertyex', 'Collation'));
  pg_typeof  
-------------
 sql_variant
(1 row)

select databasepropertyex('test_databasepropertyex', 'ComparisonStyle');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'Edition');
 databasepropertyex 
--------------------
 Standard
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAnsiNullDefault');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAnsiNullsEnabled');
 databasepropertyex 
--------------------
 1
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAnsiPaddingEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAnsiWarningsEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsArithmeticAbortEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAutoClose');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAutoCreateStatistics');
 databasepropertyex 
--------------------
 1
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAutoCreateStatisticsIncremental');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAutoShrink');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsAutoUpdateStatistics');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsClone');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsCloseCursorsOnCommitEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsDatabaseSuspendedForSnapshotBackup');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsFulltextEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsInStandBy');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsLocalCursorsDefault');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsMemoryOptimizedElevateToSnapshotEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsMergePublished');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsNullConcat');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsNumericRoundAbortEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsParameterizationForced');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsQuotedIdentifiersEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsPublished');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsRecursiveTriggersEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsSubscribed');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsSyncWithBackup');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsTornPageDetectionEnabled');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsVerifiedClone');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'IsXTPSupported');
 databasepropertyex 
--------------------
 0
(1 row)

select databasepropertyex('test_databasepropertyex', 'LastGoodCheckDbTime');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'LCID');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'MaxSizeInBytes');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'Recovery');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'ServiceObjective');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'SQLSortOrder');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'Status');
 databasepropertyex 
--------------------
 ONLINE
(1 row)

select databasepropertyex('test_databasepropertyex', 'Updateability');
 databasepropertyex 
--------------------
 READ_WRITE
(1 row)

select databasepropertyex('test_databasepropertyex', 'UserAccess');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'Version');
 databasepropertyex 
--------------------
--?.*
(1 row)

select databasepropertyex('test_databasepropertyex', 'ReplicaID');
 databasepropertyex 
--------------------
 
(1 row)

--- expected null
select databasepropertyex('test_databasepropertyex', 'Collation_fake');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex_fake', 'Collation');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('null', 'Collation');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('test_databasepropertyex', 'null');
 databasepropertyex 
--------------------
 
(1 row)

select databasepropertyex('null', 'null');
 databasepropertyex 
--------------------
 
(1 row)

drop database test_databasepropertyex;
-- suser_name/suser_sname
SELECT suser_name() AS CurrentLoginName;
 currentloginname 
------------------
--?.*
(1 row)

create user u1 identified by 'Test@123';
SET SESSION AUTHORIZATION u1 PASSWORD 'Test@123';
SELECT suser_name() AS CurrentLoginName;
 currentloginname 
------------------
 u1
(1 row)

RESET SESSION AUTHORIZATION;
create role u2 identified by 'Test@123';
SET SESSION AUTHORIZATION u2 PASSWORD 'Test@123';
SELECT suser_name() AS CurrentLoginName;
 currentloginname 
------------------
 
(1 row)

RESET SESSION AUTHORIZATION;
select suser_name(oid) from pg_authid where rolname in ('u1', 'u2');
 suser_name 
------------
 u1
 
(2 rows)

drop user u1;
drop user u2;
SELECT suser_name(-111);
 suser_name 
------------
 
(1 row)

SELECT suser_name('-111');
 suser_name 
------------
 
(1 row)

SELECT suser_name('aaa');
ERROR:  invalid input syntax for type oid: "aaa"
LINE 1: SELECT suser_name('aaa');
                          ^
CONTEXT:  referenced column: suser_name
SELECT suser_name(null);
 suser_name 
------------
 
(1 row)

SELECT suser_sname(-111);
ERROR:  function suser_sname(integer) does not exist
LINE 1: SELECT suser_sname(-111);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: suser_sname
SELECT suser_sname('-111');
 suser_sname 
-------------
 
(1 row)

SELECT suser_sname('aaa');
 suser_sname 
-------------
 
(1 row)

SELECT suser_sname(null);
 suser_sname 
-------------
 
(1 row)

-- scope_identity
--- This function returns the last identity value generated for any table in the current session and the current scope.
create schema test_scope_identity;
set search_path to test_scope_identity;
--- base test
create table t1 (c1 int identity(100, 1), c2 int);
NOTICE:  CREATE TABLE will create implicit sequence "t1_c1_seq_identity" for serial column "t1.c1"
insert into t1 values (1);
insert into t1 values (2);
insert into t1 values (3);
insert into t1 values (4);
insert into t1 values (5);
select scope_identity();
 scope_identity 
----------------
            104
(1 row)

insert into t1 values (6);
select scope_identity();
 scope_identity 
----------------
            105
(1 row)

create table t2 (c1 int, c2 int identity(200, 1));
NOTICE:  CREATE TABLE will create implicit sequence "t2_c2_seq_identity" for serial column "t2.c2"
insert into t2 values (1);
insert into t2 values (2);
select scope_identity();
 scope_identity 
----------------
            201
(1 row)

insert into t2 values (3);
select scope_identity();
 scope_identity 
----------------
            202
(1 row)

insert into t1 values (7);
select scope_identity();
 scope_identity 
----------------
            106
(1 row)

insert into t2 values (4);
select scope_identity();
 scope_identity 
----------------
            203
(1 row)

--- function test
create or replace function test_fn_scope_identity() returns int as $$
begin
    insert into t1 values (5);
    return scope_identity();
end; 
$$ language plpgsql;
select test_fn_scope_identity();
 test_fn_scope_identity 
------------------------
                    107
(1 row)

select scope_identity();
 scope_identity 
----------------
            107
(1 row)

insert into t2 values (5);
select scope_identity();
 scope_identity 
----------------
            204
(1 row)

--- procedure test
create or replace procedure test_proc_scope_identity() as
declare
    v1 int;
begin
    insert into t1 values (6);
    v1 := scope_identity();
    raise notice 'test_proc_scope_identity, scope_identity: %', v1;
end;
/
call test_proc_scope_identity();
NOTICE:  test_proc_scope_identity, scope_identity: 108
 test_proc_scope_identity 
--------------------------
 
(1 row)

select scope_identity();
 scope_identity 
----------------
            204
(1 row)

insert into t2 values (6);
select scope_identity();
 scope_identity 
----------------
            205
(1 row)

--- before trigger test
create table t3 (c1 int identity(300, 1), c2 int);
NOTICE:  CREATE TABLE will create implicit sequence "t3_c1_seq_identity" for serial column "t3.c1"
create or replace function test_fn_trg_scope_identity_before() returns trigger as $$
declare
    v1 int;
begin
    insert into t1 values (7);
    v1 := scope_identity();
    raise notice 'test_fn_trg_scope_identity_before, scope_identity: %', v1;
    return new;
end;
$$ language pltsql;
create trigger trg_scope_identity_before
    before insert on t3
    for each row execute procedure test_fn_trg_scope_identity_before();
insert into t3 values (1);
NOTICE:  test_fn_trg_scope_identity_before, scope_identity: 109
insert into t3 values (2);
NOTICE:  test_fn_trg_scope_identity_before, scope_identity: 110
select scope_identity();
 scope_identity 
----------------
            301
(1 row)

insert into t3 values (3);
NOTICE:  test_fn_trg_scope_identity_before, scope_identity: 111
select scope_identity();
 scope_identity 
----------------
            302
(1 row)

insert into t2 values (4);
select scope_identity();
 scope_identity 
----------------
            206
(1 row)

insert into t3 values (4);
NOTICE:  test_fn_trg_scope_identity_before, scope_identity: 112
select scope_identity();
 scope_identity 
----------------
            303
(1 row)

--- after trigger test
create table t4 (c1 int identity(400, 1), c2 int);
NOTICE:  CREATE TABLE will create implicit sequence "t4_c1_seq_identity" for serial column "t4.c1"
create or replace function test_fn_trg_scope_identity_after() returns trigger as $$
declare
    v1 int;
begin
    insert into t1 values (8);
    v1 := scope_identity();
    raise notice 'test_fn_trg_scope_identity_after, scope_identity: %', v1;
    return new;
end;
$$ language pltsql;
create trigger trg_scope_identity_after
    after insert on t4
    for each row execute procedure test_fn_trg_scope_identity_after();
insert into t4 values (1);
NOTICE:  test_fn_trg_scope_identity_after, scope_identity: 113
insert into t4 values (2);
NOTICE:  test_fn_trg_scope_identity_after, scope_identity: 114
select scope_identity();
 scope_identity 
----------------
            401
(1 row)

insert into t4 values (3);
NOTICE:  test_fn_trg_scope_identity_after, scope_identity: 115
select scope_identity();
 scope_identity 
----------------
            402
(1 row)

insert into t2 values (5);
select scope_identity();
 scope_identity 
----------------
            207
(1 row)

insert into t4 values (4);
NOTICE:  test_fn_trg_scope_identity_after, scope_identity: 116
select scope_identity();
 scope_identity 
----------------
            403
(1 row)

--- test plpgsql trigger
create table t5 (c1 int identity(500, 1), c2 int);
NOTICE:  CREATE TABLE will create implicit sequence "t5_c1_seq_identity" for serial column "t5.c1"
create or replace function test_fn_trg_scope_identity_plpgsql() returns trigger as $$
declare
    v1 int;
begin
    insert into t1 values (9);
    v1 := scope_identity();
    raise notice 'test_fn_trg_scope_identity_plpgsql, scope_identity: %', v1;
    return new;
end;
$$ language plpgsql;
create trigger trg_scope_identity_plpgsql
    before insert on t5
    for each row execute procedure test_fn_trg_scope_identity_plpgsql();
insert into t5 values (1);
NOTICE:  test_fn_trg_scope_identity_plpgsql, scope_identity: 117
insert into t5 values (2);
NOTICE:  test_fn_trg_scope_identity_plpgsql, scope_identity: 118
select scope_identity();
 scope_identity 
----------------
            501
(1 row)

insert into t5 values (3);
NOTICE:  test_fn_trg_scope_identity_plpgsql, scope_identity: 119
select scope_identity();
 scope_identity 
----------------
            502
(1 row)

insert into t2 values (6);
select scope_identity();
 scope_identity 
----------------
            208
(1 row)

insert into t5 values (4);
NOTICE:  test_fn_trg_scope_identity_plpgsql, scope_identity: 120
select scope_identity();
 scope_identity 
----------------
            503
(1 row)

drop table t1;
drop table t2;
drop table t3;
drop table t4; 
drop table t5;
drop function test_fn_scope_identity();
drop function test_proc_scope_identity();
drop function test_fn_trg_scope_identity_before();
drop function test_fn_trg_scope_identity_after();
drop function test_fn_trg_scope_identity_plpgsql();
reset search_path;
drop schema test_scope_identity cascade;
-- @@PROCID
--- test procedure
CREATE OR REPLACE PROCEDURE test_procid 
AS  
DECLARE
	ProcID integer; 
BEGIN
	ProcID = @@PROCID;
	RAISE INFO 'Stored procedure: %', ProcID;
END;
/
select test_procid();
--?.*
CONTEXT:  referenced column: test_procid
 test_procid 
-------------
 
(1 row)

SELECT oid FROM pg_proc WHERE proname = 'test_procid' AND prokind = 'p';
  oid  
-------
--?.*
(1 row)

--- test function
CREATE OR REPLACE FUNCTION test_funcid() returns int as $$
begin
    return @@PROCID;
end; 
$$ language pltsql;
select test_funcid();
 test_funcid 
-------------
--?.*
(1 row)

SELECT oid FROM pg_proc WHERE proname = 'test_funcid' AND prokind = 'f';
  oid  
-------
--?.*
(1 row)

--- test trigger
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
create table t (c1 int identity, c2 int);
NOTICE:  CREATE TABLE will create implicit sequence "t_c1_seq_identity" for serial column "t.c1"
create or replace function test_triggerid() returns trigger as $$
declare
    val int;
begin
    val := @@PROCID;
    raise notice 'Triggerid: %', val;
    return new;
end;
$$ language plpgsql;
create trigger trg_procid
    before insert on t
    for each row execute procedure test_triggerid();
insert into t values (1);
--?.*
SELECT oid FROM pg_proc WHERE proname = 'test_triggerid' AND prokind = 'f';
  oid  
-------
--?.*
(1 row)

drop table t;
--- test nested call
CREATE OR REPLACE PROCEDURE test_procid_inner
AS  
DECLARE
	ProcID integer; 
BEGIN
	ProcID = @@PROCID;  
	RAISE INFO 'Inner Stored procedure: %', ProcID;
END;
/
CREATE OR REPLACE PROCEDURE test_procid_outer
AS  
DECLARE
	OuterProcID integer;
	InnerProcID integer;
BEGIN
	OuterProcID = @@PROCID;  
	RAISE INFO 'Outer stored procedure: %', OuterProcID;
	
	PERFORM test_procid_inner();  
END;
/
call test_procid_outer();
--?.*
--?.*
CONTEXT:  referenced column: test_procid_inner
SQL statement "SELECT test_procid_inner()"
PL/pgSQL function test_procid_outer() line 8 at PERFORM
 test_procid_outer 
-------------------
 
(1 row)

SELECT oid FROM pg_proc WHERE proname = 'test_procid_outer' AND prokind = 'p';
  oid  
-------
--?.*
(1 row)

SELECT oid FROM pg_proc WHERE proname = 'test_procid_inner' AND prokind = 'p';
  oid  
-------
--?.*
(1 row)

--- test anonymous block
declare
    procid int;
begin
 	procid = @@PROCID;  
	RAISE INFO 'anonymous block: %', procid;
end;
/
INFO:  anonymous block: 0
-- test ident_current
create schema test_ident_current;
set search_path = 'test_ident_current';
select sys.ident_current(null);
 ident_current 
---------------
              
(1 row)

select sys.ident_current('t1');
 ident_current 
---------------
              
(1 row)

drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
create table t1 (c1 int identity(100,1), c2 int);
NOTICE:  CREATE TABLE will create implicit sequence "t1_c1_seq_identity" for serial column "t1.c1"
select sys.ident_current('t1');
 ident_current 
---------------
           100
(1 row)

insert into t1(c2) values(10);
select * from t1;
 c1  | c2 
-----+----
 100 | 10
(1 row)

select sys.ident_current('t1');
 ident_current 
---------------
           100
(1 row)

insert into t1(c2) values(11);
select * from t1;
 c1  | c2 
-----+----
 100 | 10
 101 | 11
(2 rows)

select sys.ident_current('t1');
 ident_current 
---------------
           101
(1 row)

drop table if exists t2;
NOTICE:  table "t2" does not exist, skipping
create table t2 (c1 int identity(200,1), c2 int);
NOTICE:  CREATE TABLE will create implicit sequence "t2_c1_seq_identity" for serial column "t2.c1"
select sys.ident_current('t2');
 ident_current 
---------------
           200
(1 row)

insert into t2(c2) values(20);
select * from t2;
 c1  | c2 
-----+----
 200 | 20
(1 row)

select sys.ident_current('t2');
 ident_current 
---------------
           200
(1 row)

insert into t2(c2) values(21);
select * from t2;
 c1  | c2 
-----+----
 200 | 20
 201 | 21
(2 rows)

select sys.ident_current('t2');
 ident_current 
---------------
           201
(1 row)

drop table t1;
drop table t2;
reset search_path;
drop schema test_ident_current;
drop schema functions_test cascade;
