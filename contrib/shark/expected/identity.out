create schema identity_schema;
set current_schema = identity_schema;
CREATE TABLE book(bookId int IDENTITY, bookname NVARCHAR(50), author NVARCHAR(50));
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
INSERT INTO book VALUES('book1','author1'),('book2','author2');
INSERT INTO book(bookname,author) VALUES('book3','author3'),('book4','author4');
INSERT INTO book VALUES(3,'book5','author5');
ERROR:  INSERT has more expressions than target columns
LINE 1: INSERT INTO book VALUES(3,'book5','author5');
                                          ^
select * from book;
 bookid | bookname | author  
--------+----------+---------
      1 | book1    | author1
      2 | book2    | author2
      3 | book3    | author3
      4 | book4    | author4
(4 rows)

ALTER table book add column id int identity;
ERROR:  multiple identity specifications for column "bookid" of table "book"
drop table if exists book;
CREATE TABLE book(id int identity, bookId int IDENTITY, bookname NVARCHAR(50), author NVARCHAR(50));
NOTICE:  CREATE TABLE will create implicit sequence "book_id_seq_identity" for serial column "book.id"
ERROR:  table can only have one identity column
CREATE TABLE book
(
    bookId int NOT NULL PRIMARY KEY IDENTITY, 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
INSERT INTO book VALUES('book1','author1'),('book2','author2');
select * from book;
 bookid | bookname | author  
--------+----------+---------
      1 | book1    | author1
      2 | book2    | author2
(2 rows)

drop table if exists book;
CREATE TABLE book
(
    bookId int NOT NULL PRIMARY KEY IDENTITY(3,5), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
INSERT INTO book VALUES('book1','author1'),('book2','author2');
select * from book;
 bookid | bookname | author  
--------+----------+---------
      3 | book1    | author1
      8 | book2    | author2
(2 rows)

delete book where bookId=8;
select * from book;
 bookid | bookname | author  
--------+----------+---------
      3 | book1    | author1
(1 row)

INSERT INTO book(bookname,author) VALUES('book3','author3'),('book4','author4');
select * from book;
 bookid | bookname | author  
--------+----------+---------
      3 | book1    | author1
     13 | book3    | author3
     18 | book4    | author4
(3 rows)

drop table if exists book;
CREATE TABLE book
(
    bookId tinyint NOT NULL PRIMARY KEY IDENTITY(3,5), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
drop table if exists book;
CREATE TABLE book
(
    bookId smallint NOT NULL PRIMARY KEY IDENTITY(3,5), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
drop table if exists book;
CREATE TABLE book
(
    bookId bigint NOT NULL PRIMARY KEY IDENTITY(3,5), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
drop table if exists book;
CREATE TABLE book
(
    bookId numeric NOT NULL PRIMARY KEY IDENTITY(3,5), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
drop table if exists book;
CREATE TABLE book
(
    bookId decimal NOT NULL PRIMARY KEY IDENTITY(3,5), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
drop table if exists book;
CREATE TABLE book
(
    bookname NVARCHAR(50),
    author NVARCHAR(50)
);
ALTER TABLE book add bookId int not null primary key identity;
NOTICE:  ALTER TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "book_pkey" for table "book"
INSERT INTO book VALUES('book1','author1'),('book2','author2');
select * from book;
 bookname | author  | bookid 
----------+---------+--------
 book1    | author1 |      1
 book2    | author2 |      2
(2 rows)

delete book where bookId=8;
select * from book;
 bookname | author  | bookid 
----------+---------+--------
 book1    | author1 |      1
 book2    | author2 |      2
(2 rows)

INSERT INTO book(bookname,author) VALUES('book3','author3'),('book4','author4');
select * from book;
 bookname | author  | bookid 
----------+---------+--------
 book1    | author1 |      1
 book2    | author2 |      2
 book3    | author3 |      3
 book4    | author4 |      4
(4 rows)

drop table if exists book;
CREATE TABLE book
(
    bookId int NOT NULL PRIMARY KEY IDENTITY(100,100),
    bookname NVARCHAR(50),
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "book_pkey" for table "book"
INSERT INTO book VALUES('book1','author1'),('book2','author2');
INSERT INTO book(bookname,author) VALUES('book3','author3'),('book4','author4');
select * from book;
 bookid | bookname | author  
--------+----------+---------
    100 | book1    | author1
    200 | book2    | author2
    300 | book3    | author3
    400 | book4    | author4
(4 rows)

drop table if exists book;
CREATE TABLE book
(
    bookId tinyint NOT NULL PRIMARY KEY IDENTITY(-1,1), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
ERROR:  Identity column contains invalid SEED.
drop table if exists book;
NOTICE:  table "book" does not exist, skipping
CREATE TABLE book
(
    bookId tinyint NOT NULL PRIMARY KEY IDENTITY(0,-1), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
ERROR:  Identity column contains invalid INCREMENT.
drop table if exists book;
NOTICE:  table "book" does not exist, skipping
CREATE TABLE book
(
    bookId tinyint NOT NULL PRIMARY KEY IDENTITY(255,256), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
ERROR:  Identity column contains invalid INCREMENT.
drop table if exists book;
NOTICE:  table "book" does not exist, skipping
CREATE TABLE book
(
    bookId smallint NOT NULL PRIMARY KEY IDENTITY(32767,32768), 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
ERROR:  Identity column contains invalid INCREMENT.
drop table if exists book;
NOTICE:  table "book" does not exist, skipping
CREATE TABLE book
(
    bookId text NOT NULL PRIMARY KEY IDENTITY, 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
ERROR:  Identity column 'bookid' data type invalid.
drop table if exists book;
NOTICE:  table "book" does not exist, skipping
CREATE TABLE book
(
    bookId numeric(4,2) NOT NULL PRIMARY KEY IDENTITY, 
    bookname NVARCHAR(50), 
    author NVARCHAR(50)
);
ERROR:  Identity column 'bookid' data type invalid.
CREATE TABLE book(id serial, bookId int identity default 5, bookname char(20));
NOTICE:  CREATE TABLE will create implicit sequence "book_id_seq" for serial column "book.id"
NOTICE:  CREATE TABLE will create implicit sequence "book_bookid_seq_identity" for serial column "book.bookid"
ERROR:  multiple default values specified for column "bookid" of table "book"
CREATE TABLE t_identity(id serial, col int identity(5,10), col2 text)
partition by range(col)(
partition p1 VALUES LESS THAN (10),
partition p2 VALUES LESS THAN (20),
partition p3 VALUES LESS THAN (30),
partition p4 VALUES LESS THAN (MAXVALUE)
);
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_id_seq" for serial column "t_identity.id"
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_col_seq_identity" for serial column "t_identity.col"
insert into t_identity(col2) values('abc');
insert into t_identity(col2) values('def');
insert into t_identity(col2) values('ghi');
insert into t_identity(col2) values('jkl');
select * from t_identity partition(p1);
 id | col | col2 
----+-----+------
  1 |   5 | abc
(1 row)

select * from t_identity partition(p2);
 id | col | col2 
----+-----+------
  2 |  15 | def
(1 row)

select * from t_identity partition(p3);
 id | col | col2 
----+-----+------
  3 |  25 | ghi
(1 row)

select * from t_identity partition(p4);
 id | col | col2 
----+-----+------
  4 |  35 | jkl
(1 row)

drop table t_identity;
create table t_identity_0020(id int identity, name varchar(10));
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_0020_id_seq_identity" for serial column "t_identity_0020.id"
insert into t_identity_0020(name) values('zhangsan');
select scope_identity();
 scope_identity 
----------------
              1
(1 row)

alter table t_identity_0020 drop column id;
select scope_identity();
 scope_identity 
----------------
              1
(1 row)

drop table t_identity_0020;
create table t_identity_0032(id int identity(1,2), name varchar(10));
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_0032_id_seq_identity" for serial column "t_identity_0032.id"
insert into t_identity_0032(name) values('zhangsan');
select SCOPE_IDENTITY();
 scope_identity 
----------------
              1
(1 row)

drop table t_identity_0032;
select SCOPE_IDENTITY();
 scope_identity 
----------------
              1
(1 row)

create table t_identity_0020(id int identity, name varchar(10));
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_0020_id_seq_identity" for serial column "t_identity_0020.id"
insert into t_identity_0020(name) values('zhangsan');
insert into t_identity_0020(name) values('lisi');
insert into t_identity_0020(name) values('wangwu');
insert into t_identity_0020(name) values('zhaoliu');
select scope_identity();
 scope_identity 
----------------
              4
(1 row)

drop table t_identity_0020;
select scope_identity();
 scope_identity 
----------------
              4
(1 row)

create table t_identity_0021(id int identity, name varchar(10));
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_0021_id_seq_identity" for serial column "t_identity_0021.id"
insert into t_identity_0021(name) values('zhangsan');
insert into t_identity_0021(name) values('lisi');
insert into t_identity_0021(name) values('wangwu');
insert into t_identity_0021(name) values('zhaoliu');
insert into t_identity_0021(name) values('qianqi');
select scope_identity();
 scope_identity 
----------------
              5
(1 row)

drop table t_identity_0021;
select scope_identity();
 scope_identity 
----------------
              5
(1 row)

CREATE TABLE t_identity(id decimal(12) not null identity(1,1), col text);
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_id_seq_identity" for serial column "t_identity.id"
insert into t_identity values('aaa');
select * from t_identity;
 id | col 
----+-----
  1 | aaa
(1 row)

drop table if exists t_identity;
CREATE TABLE t_identity(id decimal(12,2) not null identity(1,1), col text);
ERROR:  Identity column 'id' data type invalid.
create schema sch_1130412;
create table sch_1130412.tab_1130412(a1 sql_variant);
insert into sch_1130412.tab_1130412 values('aa'::char(8)),('cc'::char(8));
select * from sch_1130412.tab_1130412 order by a1;
    a1    
----------
 aa      
 cc      
(2 rows)

drop table sch_1130412.tab_1130412;
drop schema sch_1130412;
drop table if exists t_identity_0020;
NOTICE:  table "t_identity_0020" does not exist, skipping
create table t_identity_0020(id int identity(1,50), name varchar(10));
NOTICE:  CREATE TABLE will create implicit sequence "t_identity_0020_id_seq_identity" for serial column "t_identity_0020.id"
DO $$ 
DECLARE last_id date; 
BEGIN 
INSERT INTO t_identity_0020 (name) VALUES ('示例'); 
last_id := scope_identity(); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  invalid input syntax for type date: "1"
CONTEXT:  PL/pgSQL function inline_code_block line 5 at assignment
DO $$ 
DECLARE last_id time; 
BEGIN 
INSERT INTO t_identity_0020 (name) VALUES ('示例'); 
last_id := scope_identity(); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  invalid input syntax for type time: "51"
CONTEXT:  PL/pgSQL function inline_code_block line 5 at assignment
DO $$ DECLARE last_id timestamp; 
BEGIN 
INSERT INTO t_identity_0020 (name) VALUES ('示例'); 
last_id := scope_identity(); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  invalid input syntax for type timestamp: "101"
CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
DO $$ DECLARE last_id varchar2(2); 
BEGIN 
INSERT INTO t_identity_0020 (name) VALUES ('示例'); 
last_id := scope_identity(); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  value too long for type character varying(2)
CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
DO $$ 
DECLARE last_id date; 
BEGIN 
last_id := ident_current('t_identity_0020'); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  invalid input syntax for type date: "151"
CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
DO $$ 
DECLARE last_id time; 
BEGIN 
last_id := ident_current('t_identity_0020'); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  invalid input syntax for type time: "151"
CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
DO $$ 
DECLARE last_id timestamp;
BEGIN 
last_id := ident_current('t_identity_0020'); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  invalid input syntax for type timestamp: "151"
CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
DO $$ 
DECLARE last_id varchar2(2); 
BEGIN 
last_id := ident_current('t_identity_0020'); 
RAISE NOTICE 'NOTICE:新插入记录的 ID 为: %', last_id; 
END; $$;
ERROR:  value too long for type character varying(2)
CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
drop table t_identity_0020;
reset current_schema;
drop schema identity_schema;
