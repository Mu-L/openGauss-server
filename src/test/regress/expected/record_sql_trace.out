\c postgres
-- check statement_trace_decode func defination
\sf statement_trace_decode
CREATE OR REPLACE FUNCTION pg_catalog.statement_trace_decode(bytea)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT NOT FENCED NOT SHIPPABLE
AS $function$statement_trace_decode$function$;
-- check full sql conatin trace field
\sf DBE_PERF.get_global_full_sql_by_timestamp
CREATE OR REPLACE FUNCTION dbe_perf.get_global_full_sql_by_timestamp(start_timestamp timestamp with time zone, end_timestamp timestamp with time zone, OUT node_name name, OUT db_name name, OUT schema_name name, OUT origin_node integer, OUT user_name name, OUT application_name text, OUT client_addr text, OUT client_port integer, OUT unique_query_id bigint, OUT debug_query_id bigint, OUT query text, OUT start_time timestamp with time zone, OUT finish_time timestamp with time zone, OUT slow_sql_threshold bigint, OUT transaction_id bigint, OUT thread_id bigint, OUT session_id bigint, OUT n_soft_parse bigint, OUT n_hard_parse bigint, OUT query_plan text, OUT n_returned_rows bigint, OUT n_tuples_fetched bigint, OUT n_tuples_returned bigint, OUT n_tuples_inserted bigint, OUT n_tuples_updated bigint, OUT n_tuples_deleted bigint, OUT n_blocks_fetched bigint, OUT n_blocks_hit bigint, OUT db_time bigint, OUT cpu_time bigint, OUT execution_time bigint, OUT parse_time bigint, OUT plan_time bigint, OUT rewrite_time bigint, OUT pl_execution_time bigint, OUT pl_compilation_time bigint, OUT data_io_time bigint, OUT net_send_info text, OUT net_recv_info text, OUT net_stream_send_info text, OUT net_stream_recv_info text, OUT lock_count bigint, OUT lock_time bigint, OUT lock_wait_count bigint, OUT lock_wait_time bigint, OUT lock_max_count bigint, OUT lwlock_count bigint, OUT lwlock_wait_count bigint, OUT lwlock_time bigint, OUT lwlock_wait_time bigint, OUT details bytea, OUT is_slow_sql boolean, OUT trace_id text, OUT advise text, OUT net_send_time bigint, OUT srt1_q bigint, OUT srt2_simple_query bigint, OUT srt3_analyze_rewrite bigint, OUT srt4_plan_query bigint, OUT srt5_light_query bigint, OUT srt6_p bigint, OUT srt7_b bigint, OUT srt8_e bigint, OUT srt9_d bigint, OUT srt10_s bigint, OUT srt11_c bigint, OUT srt12_u bigint, OUT srt13_before_query bigint, OUT srt14_after_query bigint, OUT rtt_unknown bigint, OUT net_trans_time bigint, OUT trace bytea)
 RETURNS SETOF record
 LANGUAGE plpgsql
 NOT FENCED NOT SHIPPABLE
AS $function$
 DECLARE
  row_data pg_catalog.statement_history%rowtype;
  row_name record;
  query_str text;
  -- node name
  query_str_nodes text;
  BEGIN
    -- Get all node names(CN + master DN)
   query_str_nodes := 'select * from dbe_perf.node_name';
   FOR row_name IN EXECUTE(query_str_nodes) LOOP
      query_str := 'SELECT * FROM DBE_PERF.statement_history where start_time >= ''' ||$1|| ''' and start_time <= ''' || $2 || '''';
        FOR row_data IN EXECUTE(query_str) LOOP
        IF row_data.parent_query_id = 0 then
          node_name := row_name.node_name;
          db_name := row_data.db_name;
          schema_name := row_data.schema_name;
          origin_node := row_data.origin_node;
          user_name := row_data.user_name;
          application_name := row_data.application_name;
          client_addr := row_data.client_addr;
          client_port := row_data.client_port;
          unique_query_id := row_data.unique_query_id;
          debug_query_id := row_data.debug_query_id;
          query := row_data.query;
          start_time := row_data.start_time;
          finish_time := row_data.finish_time;
          slow_sql_threshold := row_data.slow_sql_threshold;
          transaction_id := row_data.transaction_id;
          thread_id := row_data.thread_id;
          session_id := row_data.session_id;
          n_soft_parse := row_data.n_soft_parse;
          n_hard_parse := row_data.n_hard_parse;
          query_plan := row_data.query_plan;
          n_returned_rows := row_data.n_returned_rows;
          n_tuples_fetched := row_data.n_tuples_fetched;
          n_tuples_returned := row_data.n_tuples_returned;
          n_tuples_inserted := row_data.n_tuples_inserted;
          n_tuples_updated := row_data.n_tuples_updated;
          n_tuples_deleted := row_data.n_tuples_deleted;
          n_blocks_fetched := row_data.n_blocks_fetched;
          n_blocks_hit := row_data.n_blocks_hit;
          db_time := row_data.db_time;
          cpu_time := row_data.cpu_time;
          execution_time := row_data.execution_time;
          parse_time := row_data.parse_time;
          plan_time := row_data.plan_time;
          rewrite_time := row_data.rewrite_time;
          pl_execution_time := row_data.pl_execution_time;
          pl_compilation_time := row_data.pl_compilation_time;
          data_io_time := row_data.data_io_time;
          net_send_info := row_data.net_send_info;
          net_recv_info := row_data.net_recv_info;
          net_stream_send_info := row_data.net_stream_send_info;
          net_stream_recv_info := row_data.net_stream_recv_info;
          lock_count := row_data.lock_count;
          lock_time := row_data.lock_time;
          lock_wait_count := row_data.lock_wait_count;
          lock_wait_time := row_data.lock_wait_time;
          lock_max_count := row_data.lock_max_count;
          lwlock_count := row_data.lwlock_count;
          lwlock_wait_count := row_data.lwlock_wait_count;
          lwlock_time := row_data.lwlock_time;
          lwlock_wait_time := row_data.lwlock_wait_time;
          details := row_data.details;
          is_slow_sql := row_data.is_slow_sql;
          trace_id := row_data.trace_id;
          advise := row_data.advise;
          net_send_time := row_data.net_send_time;
          srt1_q := row_data.srt1_q;
          srt2_simple_query := row_data.srt2_simple_query;
          srt3_analyze_rewrite := row_data.srt3_analyze_rewrite;
          srt4_plan_query := row_data.srt4_plan_query;
          srt5_light_query := row_data.srt5_light_query;
          srt6_p := row_data.srt6_p;
          srt7_b := row_data.srt7_b;
          srt8_e := row_data.srt8_e;
          srt9_d := row_data.srt9_d;
          srt10_s := row_data.srt10_s;
          srt11_c := row_data.srt11_c;
          srt12_u := row_data.srt12_u;
          srt13_before_query := row_data.srt13_before_query;
          srt14_after_query := row_data.srt14_after_query;
          rtt_unknown := row_data.rtt_unknown;
          net_trans_time := row_data.net_trans_time;
          trace := row_data.trace;
          return next;
          END IF;
       END LOOP;
    END LOOP;
    return;
  END; $function$;
-- check slow sql conatin trace field
\sf DBE_PERF.get_global_slow_sql_by_timestamp
CREATE OR REPLACE FUNCTION dbe_perf.get_global_slow_sql_by_timestamp(start_timestamp timestamp with time zone, end_timestamp timestamp with time zone, OUT node_name name, OUT db_name name, OUT schema_name name, OUT origin_node integer, OUT user_name name, OUT application_name text, OUT client_addr text, OUT client_port integer, OUT unique_query_id bigint, OUT debug_query_id bigint, OUT query text, OUT start_time timestamp with time zone, OUT finish_time timestamp with time zone, OUT slow_sql_threshold bigint, OUT transaction_id bigint, OUT thread_id bigint, OUT session_id bigint, OUT n_soft_parse bigint, OUT n_hard_parse bigint, OUT query_plan text, OUT n_returned_rows bigint, OUT n_tuples_fetched bigint, OUT n_tuples_returned bigint, OUT n_tuples_inserted bigint, OUT n_tuples_updated bigint, OUT n_tuples_deleted bigint, OUT n_blocks_fetched bigint, OUT n_blocks_hit bigint, OUT db_time bigint, OUT cpu_time bigint, OUT execution_time bigint, OUT parse_time bigint, OUT plan_time bigint, OUT rewrite_time bigint, OUT pl_execution_time bigint, OUT pl_compilation_time bigint, OUT data_io_time bigint, OUT net_send_info text, OUT net_recv_info text, OUT net_stream_send_info text, OUT net_stream_recv_info text, OUT lock_count bigint, OUT lock_time bigint, OUT lock_wait_count bigint, OUT lock_wait_time bigint, OUT lock_max_count bigint, OUT lwlock_count bigint, OUT lwlock_wait_count bigint, OUT lwlock_time bigint, OUT lwlock_wait_time bigint, OUT details bytea, OUT is_slow_sql boolean, OUT trace_id text, OUT advise text, OUT net_send_time bigint, OUT srt1_q bigint, OUT srt2_simple_query bigint, OUT srt3_analyze_rewrite bigint, OUT srt4_plan_query bigint, OUT srt5_light_query bigint, OUT srt6_p bigint, OUT srt7_b bigint, OUT srt8_e bigint, OUT srt9_d bigint, OUT srt10_s bigint, OUT srt11_c bigint, OUT srt12_u bigint, OUT srt13_before_query bigint, OUT srt14_after_query bigint, OUT rtt_unknown bigint, OUT net_trans_time bigint, OUT trace bytea)
 RETURNS SETOF record
 LANGUAGE plpgsql
 NOT FENCED NOT SHIPPABLE
AS $function$
 DECLARE
  row_data pg_catalog.statement_history%rowtype;
  row_name record;
  query_str text;
  -- node name
  query_str_nodes text;
  BEGIN
    -- Get all node names(CN + master DN)
   query_str_nodes := 'select * from dbe_perf.node_name';
   FOR row_name IN EXECUTE(query_str_nodes) LOOP
        query_str := 'SELECT * FROM DBE_PERF.statement_history where start_time >= ''' ||$1|| ''' and start_time <= ''' || $2 || ''' and is_slow_sql = true ';
        FOR row_data IN EXECUTE(query_str) LOOP
        IF row_data.parent_query_id = 0 THEN
          node_name := row_name.node_name;
          db_name := row_data.db_name;
          schema_name := row_data.schema_name;
          origin_node := row_data.origin_node;
          user_name := row_data.user_name;
          application_name := row_data.application_name;
          client_addr := row_data.client_addr;
          client_port := row_data.client_port;
          unique_query_id := row_data.unique_query_id;
          debug_query_id := row_data.debug_query_id;
          query := row_data.query;
          start_time := row_data.start_time;
          finish_time := row_data.finish_time;
          slow_sql_threshold := row_data.slow_sql_threshold;
          transaction_id := row_data.transaction_id;
          thread_id := row_data.thread_id;
          session_id := row_data.session_id;
          n_soft_parse := row_data.n_soft_parse;
          n_hard_parse := row_data.n_hard_parse;
          query_plan := row_data.query_plan;
          n_returned_rows := row_data.n_returned_rows;
          n_tuples_fetched := row_data.n_tuples_fetched;
          n_tuples_returned := row_data.n_tuples_returned;
          n_tuples_inserted := row_data.n_tuples_inserted;
          n_tuples_updated := row_data.n_tuples_updated;
          n_tuples_deleted := row_data.n_tuples_deleted;
          n_blocks_fetched := row_data.n_blocks_fetched;
          n_blocks_hit := row_data.n_blocks_hit;
          db_time := row_data.db_time;
          cpu_time := row_data.cpu_time;
          execution_time := row_data.execution_time;
          parse_time := row_data.parse_time;
          plan_time := row_data.plan_time;
          rewrite_time := row_data.rewrite_time;
          pl_execution_time := row_data.pl_execution_time;
          pl_compilation_time := row_data.pl_compilation_time;
          data_io_time := row_data.data_io_time;
          net_send_info := row_data.net_send_info;
          net_recv_info := row_data.net_recv_info;
          net_stream_send_info := row_data.net_stream_send_info;
          net_stream_recv_info := row_data.net_stream_recv_info;
          lock_count := row_data.lock_count;
          lock_time := row_data.lock_time;
          lock_wait_count := row_data.lock_wait_count;
          lock_wait_time := row_data.lock_wait_time;
          lock_max_count := row_data.lock_max_count;
          lwlock_count := row_data.lwlock_count;
          lwlock_wait_count := row_data.lwlock_wait_count;
          lwlock_time := row_data.lwlock_time;
          lwlock_wait_time := row_data.lwlock_wait_time;
          details := row_data.details;
          is_slow_sql := row_data.is_slow_sql;
          trace_id := row_data.trace_id;
          advise := row_data.advise;
          net_send_time := row_data.net_send_time;
          srt1_q := row_data.srt1_q;
          srt2_simple_query := row_data.srt2_simple_query;
          srt3_analyze_rewrite := row_data.srt3_analyze_rewrite;
          srt4_plan_query := row_data.srt4_plan_query;
          srt5_light_query := row_data.srt5_light_query;
          srt6_p := row_data.srt6_p;
          srt7_b := row_data.srt7_b;
          srt8_e := row_data.srt8_e;
          srt9_d := row_data.srt9_d;
          srt10_s := row_data.srt10_s;
          srt11_c := row_data.srt11_c;
          srt12_u := row_data.srt12_u;
          srt13_before_query := row_data.srt13_before_query;
          srt14_after_query := row_data.srt14_after_query;
          rtt_unknown := row_data.rtt_unknown;
          net_trans_time := row_data.net_trans_time;
          trace := row_data.trace;
          return next;
          END IF;
       END LOOP;
    END LOOP;
    return;
  END; $function$;
-- The structure of function standby_statement_history must be consistent with table statement_history,for trace field.
select
    (select relnatts from pg_class where relname = 'statement_history' limit 1)
    =
    (select array_length(proargnames, 1) - 1 from pg_proc where proname = 'standby_statement_history' order by 1 limit 1)
    as issame;
 issame 
--------
 t
(1 row)

--test full/slow sql in proc
--generate slow sql
drop table if exists big_table;
CREATE TABLE big_table (
     id SERIAL PRIMARY KEY,
     column1 INT,
     column2 VARCHAR(100)
);
NOTICE:  CREATE TABLE will create implicit sequence "big_table_id_seq" for serial column "big_table.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "big_table_pkey" for table "big_table"
create or replace procedure test_slow_sql()
is
begin
perform 1;
PERFORM pg_sleep(0.1);
end;
/
-- record full sql
set track_stmt_stat_level = 'L1,OFF';
show track_stmt_stat_level;
 track_stmt_stat_level 
-----------------------
 L1,OFF
(1 row)

call test_slow_sql();
 test_slow_sql 
---------------
 
(1 row)

select statement_trace_decode(trace) from statement_history limit 0;
 statement_trace_decode 
------------------------
(0 rows)

delete from statement_history;
-- record slow sql
set log_min_duration_statement = 50;
set track_stmt_stat_level = 'OFF,L1';
show log_min_duration_statement;
 log_min_duration_statement 
----------------------------
 50ms
(1 row)

show track_stmt_stat_level;
 track_stmt_stat_level 
-----------------------
 OFF,L1
(1 row)

call test_slow_sql();
 test_slow_sql 
---------------
 
(1 row)

select statement_trace_decode(trace) from statement_history limit 0;
 statement_trace_decode 
------------------------
(0 rows)

delete from statement_history;
drop table big_table;
