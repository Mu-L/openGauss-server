--guc param
show enable_mot_server;
 enable_mot_server 
-------------------
 on
(1 row)

set enable_mot_server = on;
ERROR:  parameter "enable_mot_server" cannot be changed without restarting the server
set enable_mot_server = off;
ERROR:  parameter "enable_mot_server" cannot be changed without restarting the server
select name, setting, category, short_desc, extra_desc, context, vartype, boot_val, reset_val from pg_settings where name = 'enable_mot_server';
       name        | setting |     category      |    short_desc     | extra_desc |  context   | vartype | boot_val | reset_val 
-------------------+---------+-------------------+-------------------+------------+------------+---------+----------+-----------
 enable_mot_server | on      | Developer Options | Enable mot server |            | postmaster | bool    | off      | on
(1 row)

-- pre-operation, create user and schema
drop user if exists test_mot;
NOTICE:  role "test_mot" does not exist, skipping
create user test_mot password 'Test@123';
NOTICE:  The encrypted password contains MD5 ciphertext, which is not secure.
GRANT USAGE ON FOREIGN SERVER mot_server TO test_mot;
grant all privileges to test_mot;
set session authorization test_mot password 'Test@123';
create database disable_mot;
\c disable_mot;
drop schema if exists disable_mot_test cascade;
NOTICE:  schema "disable_mot_test" does not exist, skipping
create schema disable_mot_test;
set current_schema to disable_mot_test;
\dt
           List of relations
 Schema | Name | Type | Owner | Storage 
--------+------+------+-------+---------
(0 rows)

-- create server
create server my_server foreign data wrapper log_fdw;
drop server my_server;
create server my_server1 foreign data wrapper mot_fdw;
ERROR:  Creating additional server with mot_fdw is not allowed.
drop server my_server1;
ERROR:  server "my_server1" does not exist
-- create object
create table test_table(id int);
create foreign table test(id int) server mot_server;
insert into test values(1),(2),(3);
update test set id = 5 where id = 3;
select * from test;
 id 
----
  1
  2
  5
(3 rows)

delete from test;
prepare pre1 as select * from test;
prepare pre2 as insert into test values(1);
prepare pre3 as delete from test;
prepare pre4 as update test set id = 6;
prepare pre5 as insert into test values($1);
execute pre1;
 id 
----
(0 rows)

execute pre2;
execute pre1;
 id 
----
  1
(1 row)

execute pre3;
execute pre1;
 id 
----
(0 rows)

insert into test values(1),(2),(3);
execute pre1;
 id 
----
  1
  2
  3
(3 rows)

execute pre4;
execute pre1;
 id 
----
  6
  6
  6
(3 rows)

execute pre5(8);
execute pre1;
 id 
----
  6
  6
  6
  8
(4 rows)

create view test_view as select * from test;
select * from test_view;
 id 
----
  6
  6
  6
  8
(4 rows)

insert into test values(1),(2),(3);
select * from test;
 id 
----
  6
  6
  6
  8
  1
  2
  3
(7 rows)

explain select * from test;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on test  (cost=0.10..0.70 rows=7 width=4)
   ->  Memory Engine returned rows: 0
(2 rows)

vacuum test;
analyze test;
analyse test;
truncate table test;
alter foreign table test rename to test_mot_table;
create foreign table test1(id int);
create foreign table test2(id int primary key);
NOTICE:  CREATE FOREIGN TABLE / PRIMARY KEY will create constraint "test2_pkey" for foreign table "test2"
create foreign table bmsql_oorder (
  o_w_id       integer      not null,
  o_d_id       integer      not null,
  o_id         integer      not null,
  o_c_id       integer not null,
  o_carrier_id integer,
  o_ol_cnt     integer,
  o_all_local  integer,
  o_entry_d    timestamp,
  primary key (o_w_id, o_d_id, o_id)
);
NOTICE:  CREATE FOREIGN TABLE / PRIMARY KEY will create constraint "bmsql_oorder_pkey" for foreign table "bmsql_oorder"
create index  bmsql_oorder_index1 on bmsql_oorder(o_w_id, o_d_id, o_c_id, o_id);
drop view test_view;
drop foreign table test_mot_table;
drop foreign table test1;
drop foreign table test2;
drop foreign table bmsql_oorder;
\dt
                                 List of relations
      Schema      |    Name    | Type  |  Owner  |             Storage              
------------------+------------+-------+---------+----------------------------------
--?.*
(1 row)

create table test1(id int);
create view test_view1 as select * from test1;
insert into test1 values(1),(2),(3);
select * from test1;
 id 
----
  1
  2
  3
(3 rows)

select * from test_view1;
 id 
----
  1
  2
  3
(3 rows)

begin;
insert into test1 values(4),(5),(6);
select * from test1;
 id 
----
  1
  2
  3
  4
  5
  6
(6 rows)

select * from test_view1;
 id 
----
  1
  2
  3
  4
  5
  6
(6 rows)

commit;
select * from test1;
 id 
----
  1
  2
  3
  4
  5
  6
(6 rows)

select * from test_view1;
 id 
----
  1
  2
  3
  4
  5
  6
(6 rows)

begin;
insert into test1 values(7),(8),(9);
select * from test1;
 id 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
(9 rows)

select * from test_view1;
 id 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
(9 rows)

rollback;
select * from test1;
 id 
----
  1
  2
  3
  4
  5
  6
(6 rows)

select * from test_view1;
 id 
----
  1
  2
  3
  4
  5
  6
(6 rows)

\dt
                                 List of relations
      Schema      |    Name    | Type  |  Owner  |             Storage              
------------------+------------+-------+---------+----------------------------------
--?.*
--?.*
(2 rows)

CREATE foreign TABLE grade
(
  number INTEGER,
  name CHAR(20),
  class CHAR(20),
  grade INTEGER
);
-- procedure
CREATE PROCEDURE insert_data1(param1 INT = 0, param2 CHAR(20), param3 CHAR(20), param4 INT = 0)
IS
 BEGIN
 INSERT INTO grade VALUES(param1, param2, param3, param4);
END;
/
CALL insert_data1(param1:=210101, param2:='Alan', param3:='21.01', param4:=92);
 insert_data1 
--------------
 
(1 row)

select * from grade;
 number |         name         |        class         | grade 
--------+----------------------+----------------------+-------
 210101 | Alan                 | 21.01                |    92
(1 row)

DROP PROCEDURE insert_data1;
drop foreign table grade;
-- system tables
select extname from pg_extension where extname = 'mot_fdw';
 extname 
---------
 mot_fdw
(1 row)

select * from pg_foreign_table;
 ftrelid | ftserver | ftwriteonly | ftoptions 
---------+----------+-------------+-----------
(0 rows)

select * from pg_foreign_server;
        srvname         | srvowner | srvfdw | srvtype | srvversion | srvacl | srvoptions 
------------------------+----------+--------+---------+------------+--------+------------
--?.*
--?.*
--?.*
--?.*
(4 rows)

select * from pg_foreign_data_wrapper;
 fdwname  | fdwowner | fdwhandler | fdwvalidator | fdwacl | fdwoptions 
----------+----------+------------+--------------+--------+------------
--?.*
--?.*
--?.*
--?.*
(4 rows)

-- system functions
select * from mot_global_memory_detail() limit 1;
 numa_node | reserved_size | used_size 
-----------+---------------+-----------
--?.*
(1 row)

select * from mot_jit_detail();
 proc_oid | query | namespace | jittable_status | valid_status | last_updated | plan_type | codegen_time | verify_time | finalize_time | compile_time 
----------+-------+-----------+-----------------+--------------+--------------+-----------+--------------+-------------+---------------+--------------
(0 rows)

select * from mot_jit_profile();
 proc_oid | id | parent_id | query | namespace | weight | total | self | child_gross | child_net | def_vars | init_vars 
----------+----+-----------+-------+-----------+--------+-------+------+-------------+-----------+----------+-----------
(0 rows)

select * from mot_local_memory_detail() limit 1;
 numa_node | reserved_size | used_size 
-----------+---------------+-----------
--?.*
(1 row)

select * from mot_session_memory_detail() limit 1;
 sessid | total_size | free_size | used_size 
--------+------------+-----------+-----------
--?.*
(1 row)

select * from mot_fdw_handler();
ERROR:  function "mot_fdw_handler" in FROM has unsupported return type fdw_handler
LINE 1: select * from mot_fdw_handler();
                      ^
-- post-operation, clean
drop table test_table;
drop table test1;
drop view test_view1;
drop schema disable_mot_test cascade;
\c regression
revoke USAGE ON FOREIGN SERVER mot_server from test_mot;
drop schema test_mot cascade;
drop database disable_mot;
drop user test_mot;
