create schema dependent_view2;
set current_schema to 'dependent_view2';
--from function table
create or replace function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
create view v1 as select * from fun1(1,2);
select * from v1;
 fun1 
------
    3
(1 row)

drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 fun1   | numeric |           | main    | 
View definition:
 SELECT  *
   FROM dependent_view2.fun1(1::numeric, 2::numeric) fun1(fun1);

create or replace function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
\d+ v1
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 fun1   | numeric |           | main    | 
View definition:
SELECT fun1.fun1 FROM fun1((1)::numeric, (2)::numeric) fun1(fun1);

select * from v1; -- success
 fun1 
------
    3
(1 row)

-- targetlist
drop view v1;
create view v1 as select fun1(1,2);
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 fun1   | numeric |           | main    | 
View definition:
 SELECT dependent_view2.fun1(1::numeric, 2::numeric) AS fun1;

create or replace function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 fun1 
------
    3
(1 row)

-- jointree
create table tab (a number, b number);
insert into tab values (1,3);
drop view v1;
create view v1 as select * from tab where b = fun1(1,2);
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 a      | numeric |           | main    | 
 b      | numeric |           | main    | 
View definition:
 SELECT  *
   FROM tab
  WHERE tab.b = dependent_view2.fun1(1::numeric, 2::numeric);

create or replace function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 a | b 
---+---
 1 | 3
(1 row)

-- cte
drop view v1;
create view v1 as with tmp as (select * from tab where b = fun1(1,2)) select * from tmp;
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 a      | numeric |           | main    | 
 b      | numeric |           | main    | 
View definition:
 WITH tmp AS (
         SELECT  *
           FROM tab
          WHERE tab.b = dependent_view2.fun1(1::numeric, 2::numeric)
        )
 SELECT  *
   FROM tmp;

create or replace function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 a | b 
---+---
 1 | 3
(1 row)

-- subquery
drop view v1;
create view v1 as select *, (select fun1(1,2)) from tab;
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 a      | numeric |           | main    | 
 b      | numeric |           | main    | 
 fun1   | numeric |           | main    | 
View definition:
 SELECT  *, 
    ( SELECT dependent_view2.fun1(1::numeric, 2::numeric) AS fun1) AS fun1
   FROM tab;

create or replace function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 a | b | fun1 
---+---+------
 1 | 3 |    3
(1 row)

--union
drop view v1;
create view v1 as select a from tab union select fun1(1,2);
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 a      | numeric |           | main    | 
View definition:
         SELECT tab.a
           FROM tab
UNION 
         SELECT dependent_view2.fun1(1::numeric, 2::numeric) AS a;

create or replace function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 a 
---
 1
 3
(2 rows)

-- rebuild function with different arg type
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 a      | numeric |           | main    | 
View definition:
         SELECT tab.a
           FROM tab
UNION 
         SELECT dependent_view2.fun1(1::numeric, 2::numeric) AS a;

create or replace function fun1(n1 in varchar, n2 in varchar)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 a 
---
 1
 3
(2 rows)

-- rebuild function with different return type
drop view v1;
create view v1 as select fun1(1,2);
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
              View "dependent_view2.v1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 fun1   | numeric |           | main    | 
View definition:
 SELECT dependent_view2.fun1(1::character varying, 2::character varying) AS fun1;

create or replace function fun1(n1 in varchar, n2 in varchar)
return varchar
is
sum varchar;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 fun1 
------
 3
(1 row)

\d+ v1
                    View "dependent_view2.v1"
 Column |       Type        | Modifiers | Storage  | Description 
--------+-------------------+-----------+----------+-------------
 fun1   | character varying |           | extended | 
View definition:
 SELECT fun1(1::character varying, 2::character varying) AS fun1;

-- rebuild function with less number of args
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
                    View "dependent_view2.v1"
 Column |       Type        | Modifiers | Storage  | Description 
--------+-------------------+-----------+----------+-------------
 fun1   | character varying |           | extended | 
View definition:
 SELECT dependent_view2.fun1(1::character varying, 2::character varying) AS fun1;

create or replace function fun1(n1 in varchar)
return varchar
is
begin
return 'abc';
end;
/
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
create or replace function fun1(n1 in varchar, n2 in varchar)
return varchar
is
sum varchar;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- success
 fun1 
------
 3
(1 row)

\d+ v1
                    View "dependent_view2.v1"
 Column |       Type        | Modifiers | Storage  | Description 
--------+-------------------+-----------+----------+-------------
 fun1   | character varying |           | extended | 
View definition:
 SELECT fun1(1::character varying, 2::character varying) AS fun1;

--rebuild function with different schema
drop function fun1;
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
\d+ v1
WARNING:  View v1 references invalid table(s), view(s) or column(s).
CONTEXT:  referenced column: pg_get_viewdef
                    View "dependent_view2.v1"
 Column |       Type        | Modifiers | Storage  | Description 
--------+-------------------+-----------+----------+-------------
 fun1   | character varying |           | extended | 
View definition:
 SELECT dependent_view2.fun1(1::character varying, 2::character varying) AS fun1;

create schema test_dv2;
create or replace function test_dv2.fun1(n1 in varchar, n2 in varchar)
return varchar
is
sum varchar;
begin
select n1 + n2 into sum;
return sum;
end;
/
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
drop schema test_dv2 cascade;
NOTICE:  drop cascades to function test_dv2.fun1(character varying,character varying)
--test package
create or replace package my_pkg as
    function fun1(n1 in number, n2 in number) return number;
end my_pkg;
/
create or replace package body my_pkg as
    function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
end my_pkg;
/
drop view v1;
create view v1 as select my_pkg.fun1(1,2);
drop package my_pkg;
NOTICE:  drop cascades to function dependent_view2.fun1(numeric,numeric)
select * from v1; -- error
ERROR:  The view v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
create or replace package my_pkg as
    function fun1(n1 in number, n2 in number) return number;
end my_pkg;
/
create or replace package body my_pkg as
    function fun1(n1 in number, n2 in number)
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
end my_pkg;
/
select * from v1; -- success
 fun1 
------
    3
(1 row)

-- test material view
create or replace function fun1(n1 in varchar, n2 in varchar)
return varchar
is
sum varchar;
begin
select n1 + n2 into sum;
return sum;
end;
/
create materialized view mv1 as select fun1(1,2);
drop function fun1;
select * from mv1; --success
 fun1 
------
 3
(1 row)

refresh materialized view mv1; --error
ERROR:  The materialized view mv1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
create or replace function fun1(n1 in varchar, n2 in varchar)
return varchar
is
sum varchar;
begin
select n1 + n2 into sum;
return sum;
end;
/
refresh materialized view mv1; --success
--test create or replace function
drop view v1;
create view v1 as select fun1(1,1);
create or replace function fun1(n1 in number, n2 in number) --success
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select valid from pg_object where object_oid = 'v1'::regclass; --invalid
 valid 
-------
 f
(1 row)

select * from v1; --success
 fun1 
------
    2
(1 row)

create or replace function fun1(n1 in varchar, n2 in varchar) --success
return number
is
sum number;
begin
select n1 + n2 into sum;
return sum;
end;
/
select valid from pg_object where object_oid = 'v1'::regclass; --valid
 valid 
-------
 t
(1 row)

select * from v1; --success
 fun1 
------
    2
(1 row)

-- test function overloading
create or replace function fun1(n1 in number, n2 in number)
returns number
as $$
declare
sum number;
begin
select n1 + n2 into sum;
return sum;
end; $$
language PLPGSQL;
create or replace function fun1(n1 in varchar, n2 in varchar)
returns number
as $$
declare
sum number;
begin
select n1 + n2 into sum;
return sum;
end; $$
language PLPGSQL;
drop view v1;
create view v1 as select fun1(1,1);
drop function fun1(number,number);
select valid from pg_object where object_oid = 'v1'::regclass; --invalid
 valid 
-------
 f
(1 row)

select * from v1; --success
 fun1 
------
    2
(1 row)

--test procedure
CREATE OR REPLACE procedure depend_p1(var1 varchar,var2 out varchar)
as
p_num varchar:='aaa';
begin
var2:=var1||p_num;
END;
/
CREATE OR REPLACE VIEW depend_v1 AS select depend_p1('aa');
select * from depend_v1;
 depend_p1 
-----------
 aaaaa
(1 row)

select definition from pg_views where viewname='depend_v1';
                       definition                        
---------------------------------------------------------
 SELECT depend_p1('aa'::character varying) AS depend_p1;
(1 row)

drop procedure depend_p1;
select * from depend_v1; --failed
ERROR:  The view depend_v1 is invalid, please make it valid before operation.
HINT:  Please re-add missing table fields.
select valid from pg_object where object_oid = ' depend_v1'::regclass; --invalid
 valid 
-------
 f
(1 row)

CREATE OR REPLACE procedure depend_p1(var1 varchar,var2 out varchar)
as
p_num varchar:='aaa';
begin
var2:=var1||p_num;
END;
/
select * from depend_v1; --success
 depend_p1 
-----------
 aaaaa
(1 row)

-- test multi-function
CREATE TABLE employees (
    employee_id serial PRIMARY KEY,
    employee_name varchar(50) NOT NULL,
    department varchar(50),
    salary numeric(10, 2),
    hire_date date
);
NOTICE:  CREATE TABLE will create implicit sequence "employees_employee_id_seq" for serial column "employees.employee_id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "employees_pkey" for table "employees"
INSERT INTO employees (employee_name, department, salary, hire_date)
VALUES
    ('张三', '研发部', 8000.00, '2020-01-01'),
    ('李四', '市场部', 7500.00, '2021-03-15'),
    ('王五', '财务部', 7000.00, '2019-11-20'),
    ('赵六', '研发部', 8500.00, '2022-05-10');
CREATE  FUNCTION calculate_working_years(p_hire_date date) RETURNS integer
AS $$
DECLARE
    v_working_years integer;
    v_current_date date := current_date;
BEGIN
    v_working_years := extract(year from age(v_current_date, p_hire_date));
    RETURN v_working_years;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION calculate_bonus_percentage(p_working_years integer) RETURNS numeric(5, 2)
AS $$
DECLARE
    v_bonus_percentage numeric(5, 2);
BEGIN
    IF p_working_years < 3 THEN
        v_bonus_percentage := 0.1;
    ELSIF p_working_years >= 3 AND p_working_years < 5 THEN
        v_bonus_percentage := 0.15;
    ELSE
        v_bonus_percentage := 0.2;
    END IF;
    RETURN v_bonus_percentage;
END;
$$ LANGUAGE plpgsql;
CREATE VIEW employee_bonus_view AS
SELECT employee_name,
       calculate_working_years(hire_date) AS working_years,
       calculate_bonus_percentage(calculate_working_years(hire_date)) AS bonus_percentage
FROM employees;
drop FUNCTION calculate_working_years;
CREATE OR REPLACE FUNCTION calculate_working_years(p_hire_date date) RETURNS integer
AS $$
DECLARE
    v_working_years integer;
    v_current_date date := current_date;
BEGIN
    v_working_years := extract(year from age(v_current_date, p_hire_date));
    RETURN v_working_years;
END;
$$ LANGUAGE plpgsql;
select pg_get_viewdef('employee_bonus_view');
                                                                                               pg_get_viewdef                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 SELECT employees.employee_name, calculate_working_years(employees.hire_date) AS working_years, calculate_bonus_percentage(calculate_working_years(employees.hire_date)) AS bonus_percentage FROM employees;
(1 row)

select * from employee_bonus_view;
 employee_name | working_years | bonus_percentage 
---------------+---------------+------------------
--?.*
--?.*
--?.*
--?.*
(4 rows)

-- test function overloading with different nums of arg
drop FUNCTION if exists func_ddl0022(int,int);
NOTICE:  function func_ddl0022(pg_catalog.int4,pg_catalog.int4) does not exist, skipping
CREATE FUNCTION func_ddl0022(a int, b int)
RETURNS int
AS $$
declare
sum int;
BEGIN
    select a + b into sum;
return sum;
END;
$$
LANGUAGE plpgsql;
drop FUNCTION if exists func_ddl0022(int,int,int);
NOTICE:  function func_ddl0022(pg_catalog.int4,pg_catalog.int4,pg_catalog.int4) does not exist, skipping
CREATE  FUNCTION func_ddl0022(a int, b int,c int)
RETURNS int
AS $$
declare
sum int;
BEGIN
    select a + b + c into sum;
return sum;
END;
$$
LANGUAGE plpgsql;
create view v_ddl0022 as select func_ddl0022(1,2,3);
drop FUNCTION func_ddl0022(int,int,int);
CREATE  FUNCTION func_ddl0022(a int, b int,c int)
RETURNS int
AS $$
declare
sum int;
BEGIN
    select a + b + c into sum;
return sum;
END;
$$
LANGUAGE plpgsql;
select * from v_ddl0022;
 func_ddl0022 
--------------
            6
(1 row)

-- delete non-depend function with same name
drop FUNCTION func_ddl0022(int,int);
select valid from pg_object where object_oid='v_ddl0022'::regclass;
 valid 
-------
 t
(1 row)

drop schema dependent_view2 cascade;
NOTICE:  drop cascades to 14 other objects
DETAIL:  drop cascades to table tab
--?.*
drop cascades to function dependent_view2.fun1(numeric,numeric)
drop cascades to function fun1(character varying,character varying)
drop cascades to materialized view mv1
drop cascades to view v1
drop cascades to function depend_p1(character varying)
drop cascades to view depend_v1
drop cascades to table employees
drop cascades to function calculate_bonus_percentage(integer)
drop cascades to function calculate_working_years(timestamp without time zone)
drop cascades to view employee_bonus_view
drop cascades to function func_ddl0022(integer,integer,integer)
drop cascades to view v_ddl0022
reset current_schema;
