--nth_value support algorithm FROM LAST/FIRST and IGNORE/REPSECT NULLS
DROP TABLE IF EXISTS temp_table;
NOTICE:  table "temp_table" does not exist, skipping
CREATE TABLE temp_table(ten int, four int);
insert into temp_table values(1,1),(1,1),(7,1),(9,1),(0,2),(1,3),(3,3),(null,1),(null,2),(8,1),(null,1),(null,1); 
--check whole partition
SELECT NTH_VALUE(TEN, 1) OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
 nth_value | ten | four 
-----------+-----+------
         1 |   1 |    1
         1 |   1 |    1
         1 |   7 |    1
         1 |   8 |    1
         1 |   9 |    1
         1 |     |    1
         1 |     |    1
         1 |     |    1
         0 |   0 |    2
         0 |     |    2
         1 |   1 |    3
         1 |   3 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 1) FROM LAST OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
 nth_value | ten | four 
-----------+-----+------
           |   1 |    1
           |   1 |    1
           |   7 |    1
           |   8 |    1
           |   9 |    1
           |     |    1
           |     |    1
           |     |    1
           |   0 |    2
           |     |    2
         3 |   1 |    3
         3 |   3 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 1) FROM FIRST OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
 nth_value | ten | four 
-----------+-----+------
         1 |   1 |    1
         1 |   1 |    1
         1 |   7 |    1
         1 |   8 |    1
         1 |   9 |    1
         1 |     |    1
         1 |     |    1
         1 |     |    1
         0 |   0 |    2
         0 |     |    2
         1 |   1 |    3
         1 |   3 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 1) IGNORE NULLS OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
 nth_value | ten | four 
-----------+-----+------
         1 |   1 |    1
         1 |   1 |    1
         1 |   7 |    1
         1 |   8 |    1
         1 |   9 |    1
         1 |     |    1
         1 |     |    1
         1 |     |    1
         0 |   0 |    2
         0 |     |    2
         1 |   1 |    3
         1 |   3 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 1) RESPECT NULLS OVER (PARTITION BY FOUR order by ten desc ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
           |     |    1
           |     |    1
           |     |    1
           |   9 |    1
           |   8 |    1
           |   7 |    1
           |   1 |    1
           |   1 |    1
           |     |    2
           |   0 |    2
         3 |   3 |    3
         3 |   1 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 1) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
 nth_value | ten | four 
-----------+-----+------
         9 |   1 |    1
         9 |   1 |    1
         9 |   7 |    1
         9 |   8 |    1
         9 |   9 |    1
         9 |     |    1
         9 |     |    1
         9 |     |    1
         0 |   0 |    2
         0 |     |    2
         3 |   1 |    3
         3 |   3 |    3
(12 rows)

SELECT NTH_VALUE(TEN,2) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
 nth_value | ten | four 
-----------+-----+------
         8 |   1 |    1
         8 |   1 |    1
         8 |   7 |    1
         8 |   8 |    1
         8 |   9 |    1
         8 |     |    1
         8 |     |    1
         8 |     |    1
           |   0 |    2
           |     |    2
         1 |   1 |    3
         1 |   3 |    3
(12 rows)

SELECT NTH_VALUE(TEN,3) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
 nth_value | ten | four 
-----------+-----+------
         7 |   1 |    1
         7 |   1 |    1
         7 |   7 |    1
         7 |   8 |    1
         7 |   9 |    1
         7 |     |    1
         7 |     |    1
         7 |     |    1
           |   0 |    2
           |     |    2
           |   1 |    3
           |   3 |    3
(12 rows)

SELECT NTH_VALUE(TEN,2) FROM FIRST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
         8 |     |    1
         8 |     |    1
         8 |     |    1
         8 |   9 |    1
         8 |   8 |    1
         8 |   7 |    1
         8 |   1 |    1
         8 |   1 |    1
           |     |    2
           |   0 |    2
         1 |   3 |    3
         1 |   1 |    3
(12 rows)

SELECT NTH_VALUE(TEN,3) FROM FIRST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
         7 |     |    1
         7 |     |    1
         7 |     |    1
         7 |   9 |    1
         7 |   8 |    1
         7 |   7 |    1
         7 |   1 |    1
         7 |   1 |    1
           |     |    2
           |   0 |    2
           |   3 |    3
           |   1 |    3
(12 rows)

--check default frame head to current row
SELECT NTH_VALUE(TEN, 1) FROM FIRST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
           |     |    1
           |     |    1
           |     |    1
         9 |   9 |    1
         9 |   8 |    1
         9 |   7 |    1
         9 |   1 |    1
         9 |   1 |    1
           |     |    2
         0 |   0 |    2
         3 |   3 |    3
         3 |   1 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 2) FROM FIRST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
           |     |    1
           |     |    1
           |     |    1
           |   9 |    1
         8 |   8 |    1
         8 |   7 |    1
         8 |   1 |    1
         8 |   1 |    1
           |     |    2
           |   0 |    2
           |   3 |    3
         1 |   1 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 3) FROM FIRST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
           |     |    1
           |     |    1
           |     |    1
           |   9 |    1
           |   8 |    1
         7 |   7 |    1
         7 |   1 |    1
         7 |   1 |    1
           |     |    2
           |   0 |    2
           |   3 |    3
           |   1 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 1) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
           |     |    1
           |     |    1
           |     |    1
         9 |   9 |    1
         8 |   8 |    1
         7 |   7 |    1
         1 |   1 |    1
         1 |   1 |    1
           |     |    2
         0 |   0 |    2
         3 |   3 |    3
         1 |   1 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 2) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
           |     |    1
           |     |    1
           |     |    1
           |   9 |    1
         9 |   8 |    1
         8 |   7 |    1
         1 |   1 |    1
         1 |   1 |    1
           |     |    2
           |   0 |    2
           |   3 |    3
         3 |   1 |    3
(12 rows)

SELECT NTH_VALUE(TEN, 3) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
 nth_value | ten | four 
-----------+-----+------
           |     |    1
           |     |    1
           |     |    1
           |   9 |    1
           |   8 |    1
         9 |   7 |    1
         7 |   1 |    1
         7 |   1 |    1
           |     |    2
           |   0 |    2
           |   3 |    3
           |   1 |    3
(12 rows)

--add for issue IBCABM:A兼容性，NTH_VALUE函数的 IGNORE NULLS未生效
drop table if exists sales_data;
NOTICE:  table "sales_data" does not exist, skipping
CREATE TABLE sales_data(
sales_id INT,
sales_date DATE,
employee_id INT,
sales_amount number
);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(1, date'2024-01-01', 101, 1000.00);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(2, date'2024-01-02', 101, NULL);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(3, date'2024-01-03', 101, 1500.00);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(4, date'2024-01-04', 102, 2000.00);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(5, date'2024-01-05', 102, 2500.00);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(6,date'2024-01-06', 102, NULL);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(7, date'2024-01-07', 103, 3000.00);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(8, date'2024-01-08', 103, NULL);
INSERT INTO sales_data (sales_id, sales_date, employee_id, sales_amount) VALUES
(9, date'2024-01-09', 103, 3500.00);
select * from sales_data;
 sales_id |        sales_date        | employee_id | sales_amount 
----------+--------------------------+-------------+--------------
        1 | Mon Jan 01 00:00:00 2024 |         101 |      1000.00
        2 | Tue Jan 02 00:00:00 2024 |         101 |             
        3 | Wed Jan 03 00:00:00 2024 |         101 |      1500.00
        4 | Thu Jan 04 00:00:00 2024 |         102 |      2000.00
        5 | Fri Jan 05 00:00:00 2024 |         102 |      2500.00
        6 | Sat Jan 06 00:00:00 2024 |         102 |             
        7 | Sun Jan 07 00:00:00 2024 |         103 |      3000.00
        8 | Mon Jan 08 00:00:00 2024 |         103 |             
        9 | Tue Jan 09 00:00:00 2024 |         103 |      3500.00
(9 rows)

SELECT
employee_id,
sales_date,
sales_amount,
NTH_VALUE(sales_amount, 2) IGNORE NULLS OVER (PARTITION BY employee_id ORDER BY sales_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS nth_value_ignore_nulls
FROM sales_data;
 employee_id |        sales_date        | sales_amount | nth_value_ignore_nulls 
-------------+--------------------------+--------------+------------------------
         101 | Mon Jan 01 00:00:00 2024 |      1000.00 |                       
         101 | Tue Jan 02 00:00:00 2024 |              |                       
         101 | Wed Jan 03 00:00:00 2024 |      1500.00 |                1500.00
         102 | Thu Jan 04 00:00:00 2024 |      2000.00 |                       
         102 | Fri Jan 05 00:00:00 2024 |      2500.00 |                2500.00
         102 | Sat Jan 06 00:00:00 2024 |              |                2500.00
         103 | Sun Jan 07 00:00:00 2024 |      3000.00 |                       
         103 | Mon Jan 08 00:00:00 2024 |              |                       
         103 | Tue Jan 09 00:00:00 2024 |      3500.00 |                3500.00
(9 rows)

--check error case
SELECT NTH_VALUE(TEN, 0) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
ERROR:  argument of nth_value must be greater than zero
SELECT NTH_VALUE(TEN, 1) IGNORE NULLS FROM LAST OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN desc;
ERROR:  syntax error at or near "FROM"
LINE 1: SELECT NTH_VALUE(TEN, 1) IGNORE NULLS FROM LAST OVER (PARTIT...
                                              ^
SELECT NTH_VALUE(TEN, 1) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten desc) AS NTH_VALUE, TEN, FOUR
FROM temp_table 
GROUP BY 1
ORDER BY FOUR, TEN desc;
ERROR:  window functions not allowed in GROUP BY clause
LINE 1: SELECT NTH_VALUE(TEN, 1) FROM LAST IGNORE NULLS OVER (PARTIT...
               ^
--check for dump
CREATE VIEW nthview1 as SELECT NTH_VALUE(TEN, 1) OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
create view nthview2 as SELECT NTH_VALUE(TEN, 1) FROM LAST OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
create view nthview3 as SELECT NTH_VALUE(TEN, 2) IGNORE NULLS OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
create view nthview4 as SELECT NTH_VALUE(TEN,3) FROM LAST IGNORE NULLS OVER (PARTITION BY FOUR order by ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS NTH_VALUE, TEN, FOUR FROM temp_table ORDER BY FOUR, TEN;
\d+ nthview1
                 View "public.nthview1"
  Column   |  Type   | Modifiers | Storage | Description 
-----------+---------+-----------+---------+-------------
 nth_value | integer |           | plain   | 
 ten       | integer |           | plain   | 
 four      | integer |           | plain   | 
View definition:
 SELECT nth_value(temp_table.ten, 1) OVER (PARTITION BY temp_table.four ORDER BY temp_table.ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "nth_value", 
    temp_table.ten, temp_table.four
   FROM temp_table
  ORDER BY temp_table.four, temp_table.ten;

\d+ nthview2
                 View "public.nthview2"
  Column   |  Type   | Modifiers | Storage | Description 
-----------+---------+-----------+---------+-------------
 nth_value | integer |           | plain   | 
 ten       | integer |           | plain   | 
 four      | integer |           | plain   | 
View definition:
 SELECT nth_value(temp_table.ten, 1) FROM LAST OVER (PARTITION BY temp_table.four ORDER BY temp_table.ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "nth_value", 
    temp_table.ten, temp_table.four
   FROM temp_table
  ORDER BY temp_table.four, temp_table.ten;

\d+ nthview3
                 View "public.nthview3"
  Column   |  Type   | Modifiers | Storage | Description 
-----------+---------+-----------+---------+-------------
 nth_value | integer |           | plain   | 
 ten       | integer |           | plain   | 
 four      | integer |           | plain   | 
View definition:
 SELECT nth_value(temp_table.ten, 2) IGNORE NULLS OVER (PARTITION BY temp_table.four ORDER BY temp_table.ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "nth_value", 
    temp_table.ten, temp_table.four
   FROM temp_table
  ORDER BY temp_table.four, temp_table.ten;

\d+ nthview4
                 View "public.nthview4"
  Column   |  Type   | Modifiers | Storage | Description 
-----------+---------+-----------+---------+-------------
 nth_value | integer |           | plain   | 
 ten       | integer |           | plain   | 
 four      | integer |           | plain   | 
View definition:
 SELECT nth_value(temp_table.ten, 3) FROM LAST IGNORE NULLS OVER (PARTITION BY temp_table.four ORDER BY temp_table.ten ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "nth_value", 
    temp_table.ten, temp_table.four
   FROM temp_table
  ORDER BY temp_table.four, temp_table.ten;

DROP TABLE IF EXISTS temp_table CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to view nthview1
drop cascades to view nthview2
drop cascades to view nthview3
drop cascades to view nthview4
