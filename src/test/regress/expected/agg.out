create schema aggregate;
set current_schema='aggregate';
create table t1 (a int , b int);
insert into t1 values(1,2);
explain (costs off)
select count(*) from (
  select row_number() over(partition by a, b) as rn,
      first_value(a) over(partition by b, a) as fv,
      * from t1
  )
where rn = 1;
                      QUERY PLAN                      
------------------------------------------------------
 Aggregate
   ->  Subquery Scan on __unnamed_subquery__
         Filter: (__unnamed_subquery__.rn = 1)
         ->  WindowAgg
               ->  Sort
                     Sort Key: t1.b, t1.a
                     ->  WindowAgg
                           ->  Sort
                                 Sort Key: t1.a, t1.b
                                 ->  Seq Scan on t1
(10 rows)

set qrw_inlist2join_optmode = 'disable';
explain  (costs off)
select count(*) from (
  select row_number() over(partition by a, b) as rn,
      first_value(a) over(partition by b, a) as fv,
      * from t1
  )
where rn = 1;
                  QUERY PLAN                   
-----------------------------------------------
 Aggregate
   ->  Subquery Scan on __unnamed_subquery__
         Filter: (__unnamed_subquery__.rn = 1)
         ->  WindowAgg
               ->  Sort
                     Sort Key: t1.a, t1.b
                     ->  Seq Scan on t1
(7 rows)

reset qrw_inlist2join_optmode;
set enable_hashagg = off;
--force hash agg, if used sort agg will report error.
select a , count(distinct  generate_series(1,2)) from t1 group by a;
ERROR:  aggregate function calls cannot contain set-returning function calls
LINE 1: select a , count(distinct  generate_series(1,2)) from t1 gro...
                                   ^
CONTEXT:  referenced column: count
explain (verbose, costs off)
select a , count(distinct  generate_series(1,2)) from t1 group by a;
ERROR:  aggregate function calls cannot contain set-returning function calls
LINE 2: select a , count(distinct  generate_series(1,2)) from t1 gro...
                                   ^
CONTEXT:  referenced column: count
set query_dop = 2;
select a , count(distinct  generate_series(1,2)) from t1 group by a;
ERROR:  aggregate function calls cannot contain set-returning function calls
LINE 1: select a , count(distinct  generate_series(1,2)) from t1 gro...
                                   ^
CONTEXT:  referenced column: count
reset query_dop;
--test const-false agg
CREATE TABLE bmsql_item (
i_id int4 NoT NULL,i_name varchar(24),i_price numeric(5,2),i_data varchar( 50),i_im_id int4,
coNSTRAINT bmsql_item_pkey PRIMARY KEY (i_id)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "bmsql_item_pkey" for table "bmsql_item"
insert into bmsql_item values ('1','sqltest_varchar_1','0.01','sqltest_varchar_1','1');
insert into bmsql_item values ('2','sqltest_varchar_2','0.02','sqltest_varchar_2','2');
insert into bmsql_item values ('3','sqltest_varchar_3','0.03','sqltest_varchar_3','3');
insert into bmsql_item values ('4','sqltest_varchar_4','0.04','sqltest_varchar_4','4');
insert into bmsql_item values ('5');
CREATE TABLE bmsql_new_order (
no_w_id int4 NOT NULL,
no_d_id int4 NOT NULL,no_o_id int4 NOT NULL
);
insert into bmsql_new_order values('1','1','1');
insert into bmsql_new_order values('2','2','2');
insert into bmsql_new_order values('3','3','3');
insert into bmsql_new_order values('4','4','4');
insert into bmsql_new_order values('5','5','5');
SELECT
   (avg(alias24.alias17)>2) AS alias32
FROM
    bmsql_item,
    (
        SELECT alias12.alias5 AS alias17
		FROM ( SELECT sin(bmsql_new_order.no_o_id)alias5 FROM bmsql_new_order )alias12
	)alias24
	GROUP BY bmsql_item.i_im_id HAVING 1>2
UNION
SELECT TRUE FROM  bmsql_item;
 alias32 
---------
 t
(1 row)

explain (verbose,costs off)
SELECT
   (avg(alias24.alias17)>2) AS alias32
FROM
    bmsql_item,
    (
        SELECT alias12.alias5 AS alias17
		FROM ( SELECT sin(bmsql_new_order.no_o_id)alias5 FROM bmsql_new_order )alias12
	)alias24
	GROUP BY bmsql_item.i_im_id HAVING 1>2
UNION
SELECT TRUE FROM  bmsql_item;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Unique
   Output: (NULL::boolean)
   ->  Sort
         Output: (NULL::boolean)
         Sort Key: (NULL::boolean)
         ->  Append
               ->  Subquery Scan on "*SELECT* 1"
                     Output: NULL::boolean
                     ->  Result
                           Output: NULL::boolean, aggregate.bmsql_item.i_im_id
                           One-Time Filter: false
               ->  Seq Scan on aggregate.bmsql_item
                     Output: true
(13 rows)

create table test_agg_false(a int, b varchar(20),c text, d numeric(5,2));
explain (verbose ,costs off) select sum(a),sum(b) , d from test_agg_false where 0=1 group by d;
                 QUERY PLAN                 
--------------------------------------------
 Result
   Output: NULL::bigint, NULL::numeric, d
   One-Time Filter: false
   ->  Seq Scan on aggregate.test_agg_false
         Output: a, b, c, d
(5 rows)

select sum(a),sum(b) , d from test_agg_false where 0=1 group by d;
 sum | sum | d 
-----+-----+---
(0 rows)

explain (verbose, costs off) select sum(a)+sum(b) , d from test_agg_false where 0=1 group by d;
                 QUERY PLAN                 
--------------------------------------------
 Result
   Output: NULL::numeric, d
   One-Time Filter: false
   ->  Seq Scan on aggregate.test_agg_false
         Output: a, b, c, d
(5 rows)

select sum(a)+sum(b) , d from test_agg_false where 0=1 group by d;
 ?column? | d 
----------+---
(0 rows)

explain (verbose, costs off) select sin(sum(a)+sum(b)) , d from test_agg_false where 0=1 group by d;
                 QUERY PLAN                 
--------------------------------------------
 Result
   Output: NULL::double precision, d
   One-Time Filter: false
   ->  Seq Scan on aggregate.test_agg_false
         Output: a, b, c, d
(5 rows)

select sin(sum(a)+sum(b)) , d from test_agg_false where 0=1 group by d;
 sin | d 
-----+---
(0 rows)

explain (verbose ,costs off) select sum(a)+sum(b) , d , 1 from test_agg_false where 0=1 group by d;
                 QUERY PLAN                 
--------------------------------------------
 Result
   Output: NULL::numeric, d, 1
   One-Time Filter: false
   ->  Seq Scan on aggregate.test_agg_false
         Output: a, b, c, d
(5 rows)

select sum(a)+sum(b) , d ,1 from test_agg_false where 0=1 group by d;
 ?column? | d | ?column? 
----------+---+----------
(0 rows)

CREATE TABLE test_table (column_x double precision , column_y double precision);
INSERT INTO test_table (column_x, column_y) VALUES (55, 38);
INSERT INTO test_table (column_x, column_y) VALUES (46, 29);
INSERT INTO test_table (column_x, column_y) VALUES (41, 24);
INSERT INTO test_table (column_x, column_y) VALUES (48, 33);
INSERT INTO test_table (column_x, column_y) VALUES (51, 39);
INSERT INTO test_table (column_x, column_y) VALUES (49, 32);
SELECT corr_s(column_x, column_y) FROM test_table;
      corr_s      
------------------
 .885714285714286
(1 row)

SELECT corr_s(column_x, column_y, 'COEFFICIENT') FROM test_table;
      corr_s      
------------------
 .885714285714286
(1 row)

SELECT corr_s(column_x, column_y, 'ONE_SIDED_SIG') FROM test_table;
       corr_s       
--------------------
 .00942274052478131
(1 row)

SELECT corr_s(column_x, column_y, 'ONE_SIDED_SIG_POS') FROM test_table;
       corr_s       
--------------------
 .00942274052478131
(1 row)

SELECT corr_s(column_x, column_y, 'ONE_SIDED_SIG_NEG') FROM test_table;
      corr_s      
------------------
 .990577259475219
(1 row)

SELECT corr_s(column_x, column_y, 'TWO_SIDED_SIG') FROM test_table;
      corr_s       
-------------------
 .0188454810495626
(1 row)

SELECT corr_k(column_x, column_y) FROM test_table;
      corr_k      
------------------
 .733333333333333
(1 row)

SELECT corr_k(column_x, column_y, 'COEFFICIENT') FROM test_table;
      corr_k      
------------------
 .733333333333333
(1 row)

SELECT corr_k(column_x, column_y, 'ONE_SIDED_SIG') FROM test_table;
      corr_k       
-------------------
 .0193887521961533
(1 row)

SELECT corr_k(column_x, column_y, 'ONE_SIDED_SIG_POS') FROM test_table;
      corr_k       
-------------------
 .0193887521961533
(1 row)

SELECT corr_k(column_x, column_y, 'ONE_SIDED_SIG_NEG') FROM test_table;
      corr_k      
------------------
 .980611247803847
(1 row)

SELECT corr_k(column_x, column_y, 'TWO_SIDED_SIG') FROM test_table;
      corr_k       
-------------------
 .0387775043923066
(1 row)

CREATE TABLE null_table1 (column_x double precision, column_y double precision);
INSERT INTO null_table1 (column_x, column_y) VALUES (null, null);
INSERT INTO null_table1 (column_x, column_y) VALUES (null, null);
SELECT corr_s(column_x, column_y, 'COEFFICIENT') FROM null_table1;
 corr_s 
--------
       
(1 row)

CREATE TABLE null_table2 (column_x double precision, column_y double precision);
INSERT INTO null_table2(column_x, column_y) VALUES (null, 38);
INSERT INTO null_table2(column_x, column_y) VALUES (null, 29);
SELECT corr_s(column_x, column_y, 'COEFFICIENT') FROM null_table2;
 corr_s 
--------
       
(1 row)

CREATE TABLE null_table3 (column_x double precision, column_y double precision);
INSERT INTO null_table3(column_x, column_y) VALUES (55, 38);
INSERT INTO null_table3(column_x, column_y) VALUES (null, 29);
INSERT INTO null_table3(column_x, column_y) VALUES (41, 24);
INSERT INTO null_table3(column_x, column_y) VALUES (48, 33);
INSERT INTO null_table3(column_x, column_y) VALUES (51, 39);
INSERT INTO null_table3(column_x, column_y) VALUES (49, 32);
SELECT corr_s(column_x, column_y, 'COEFFICIENT') FROM null_table3;
 corr_s 
--------
     .8
(1 row)

drop table test_table;
drop table null_table1;
drop table null_table2;
drop table null_table3;
drop table t1;
drop schema aggregate CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table bmsql_item
drop cascades to table bmsql_new_order
drop cascades to table test_agg_false
